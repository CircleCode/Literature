<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../Definitions.xyl"?>

<definition xmlns="http://hoa-project.net/xyl/xylophone">
<yield name="chapter">

<section1 id="Routerdispatcher">
  <title>Manuel d'apprentissage<title_break />Router + Dispatcher = ♥</title>

  <ulist class="prev_next">
    <item><link href="@ll:chapter=(!title)"
                sref="hoa://Application/External/Literature/Learn/Framework.xyl"
                sref-title="//__current_ns:section1/@id"><previous_chapter /> Aspect framework</link></item>
    <item><link href="@ll:chapter=(!title)"
                sref="hoa://Application/External/Literature/Learn/Stream.xyl"
                sref-title="//__current_ns:section1/@id"><next_chapter /> Une histoire de flux</link></item>
  </ulist>

  <p>Une composante aussi nécessaire qu'important est l'<strong>assignation des
  tâches</strong> en fonction des requêtes effectuées sur l'application. Dans ce
  chapitre, nous allons présenter deux paquetages de Hoa :
  <code>Hoa\Router</code> et <code>Hoa\Dispatcher</code> afin de construire
  notre première application.</p>

  <section2 id="Table_des_matieres" for="menu-toc">
    <title>Table des matières</title>

    <tableofcontents id="main-toc" />
  </section2>

  <section2 id="Introduction" for="main-toc menu-toc">
    <title>Introduction</title>

    <p>Maintenant que l'on connait un peu le fonctionnement de Hoa et que l'on a
    fait connaissance avec quelques aspects framework, on va entammer notre
    <strong>première application</strong>.</p>
    <p>On va tout d'abord commencer par un peu d'histoire pour bien comprendre comment
    fonctionne une application Web. Par la suite, on donnera un aperçu du
    fonctionnement, qui se résumera à écrire et tester quelques règles. Et
    enfin, on expliquera le fonctionnement du routeur et du dispatcheur utilisé
    dans l'aperçu.</p>
  </section2>

  <section2 id="Un_peu_d-histoire" for="main-toc menu-toc">
    <title>Un peu d'histoire</title>

    <p>Contrairement à des applications de bureaux, les applications Web ne
    restent pas en exécution durant toute leur utilisation (même s'il existe
    quelques exceptions, on préfère rester dans les généralités). PHP ne
    déroge pas à la règle. En effet, quand on effectue une demande auprès de
    l'application (par exemple : « je veux telle page »), PHP reçoit la demande,
    exécute la tâche associée à la demande, fournit une réponse et s'arrête.
    Ceci est le fonctionnement schématique type de PHP.</p>
    <p>On ne parle pas réellement de demande mais plutôt de
    <strong>requête</strong>. La majorité des requêtes sur le Web sont exprimées
    sous le format <strong>HTTP</strong> (pour <em>HyperText Transfer
    Protocol</em>). Seulement trois versions d'HTTP ont été écrites :
    <link href="http://tools.ietf.org/html/rfc1945">RFC1945</link> pour
    HTTP1.0, <link href="http://tools.ietf.org/html/rfc2068">RFC2068</link>
    pour HTTP1.1 et
    <link href="http://tools.ietf.org/html/rfc2616">RFC2616</link> pour la
    version finale d'HTTP1.1, que l'on utilise actuellement partout. La personne
    qui émet une requête est un <strong>client</strong> (souvent l'utilisateur).
    Cette requête est envoyée à un <strong>serveur</strong>, qui connait votre
    application. Si on entre un peu plus dans le détail, côté serveur, un
    programme filtre la réception des requêtes. Dans le cas d'HTTP, on appelle
    ce programme un <strong>serveur HTTP</strong>. Quand ce serveur HTTP reçoit
    une requête, il regarde quel programme est susceptible d'être concerné par
    cette requête et lui redirige la requête en attendant sa réponse, qu'il
    renverra alors au client.</p>
    <p>Un protocole standard a été défini pour faciliter la communication entre
    le serveur HTTP et le programme qui va réceptionner la requête. On appelle
    ce protocole : <strong>CGI</strong> (pour <em>Common Interface
    Gateway</em>), définit par la
    <link href="http://tools.ietf.org/html/rfc3875">RFC3875</link>. Toutefois,
    ce protocole n'était plus suffisant pour répondre aux nombres grandissants
    de requêtes sur les serveurs. C'est pourquoi, il a été formulé
    <link href="http://fastcgi.com/">FastCGI</link> (pour <em>Fast Common
    Gateway Interface</em>).</p>
    <p>PHP fonctionne derrière FastCGI pour recevoir les communications du
    serveurs HTTP. La requête HTTP reçue fournit toutes les informations
    nécessaires pour que PHP exécute une tâche sans problème.</p>
    <p>Une requête HTTP
    est principalement caractérisée par une <strong>méthode</strong>. On en
    dénombre huit au total : <code>CONNECT</code>, <code>DELETE</code>,
    <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>,
    <code>POST</code>, <code>PUT</code>, <code>TRACE</code>. On est capable bien
    sûr d'ajouter nos propres méthodes mais l'objectif ici n'est pas de faire un
    cours sur HTTP. À chaque méthode est associée une <strong>URI</strong> (pour
    <em>Uniform Resource Identifier</em>), standardisée par la
    <link href="http://tools.ietf.org/html/rfc3986">RFC3986</link>. Ainsi,
    l'exemple suivant est une requête qui exprime « je veux la ressource
    <code>/path/to/resource</code> » :</p>
    <blockcode>GET /path/to/resource</blockcode>
  </section2>

  <section2 id="Apercu" for="main-toc menu-toc">
    <title>Aperçu</title>

    <p>Un aperçu est ici utile pour faire quelques essais avant de détailler le
    fonctionnement. On écrit l'exemple suivant :</p>
    <blockcode language="php">from('Hoa')
-> import('Router.Http')
-> import('Dispatcher.Basic');

$router = new Hoa\Router\Http();
$router
    ->get('u', '/hello', function ( ) {

        echo 'world!' . "\n";
    })
    ->get('v', '/bye', function ( ) {
      
        echo 'ohh :-(' . "\n";
    })
    ->post('w', '/hello', function ( Array $_request ) {
      
        echo $_request['a'] + $_request['b'] . "\n";
    })
    ->get('x', '/hello_(?&lt;nick&gt;\w+)', function ( $nick ) {

        echo 'Welcome ' . ucfirst($nick) . '!' . "\n";
    });

$dispatcher = new Hoa\Dispatcher\Basic();
$dispatcher->dispatch($router);</blockcode>
    <p>Et pour tester notre routeur et notre dispatcheur, on va s'appuyer sur
    <link href="http://curl.haxx.se/">cURL</link> (pour <em>Client URL Request
    Library</em>), un outil en ligne de commande permettant de manipuler plusieurs
    protocoles, dont HTTP.</p>
    <blockcode language="shell">$ curl localhost:8888/hello
world!
$ curl localhost:8888/bye
ohh :-(
$ curl -X POST -d a=3\&amp;b=39 localhost:8888/hello
42
$ curl -X POST localhost:8888/bye
// error
$ curl localhost:8888/hello_gordon
Welcome Gordon!
$ curl localhost:8888/hello_alix
Welcome Alix!</blockcode>
    <p>Par défaut, cURL va envoyer une requête HTTP avec la méthode
    <code>GET</code>. On remarque que si on appelle <code>/hello</code> en
    <code>GET</code> ou en <code>POST</code>, cela n'aura pas le même effet. De
    même, <code>/bye</code> n'est accessible qu'avec la méthode
    <code>GET</code>. Enfin, on remarque comment on peut avoir des règles
    dynamiques et comment on peut capturer certaines parties que l'on retrouve
    en argument de nos actions.</p>
    <p>Dans cet aperçu, on a utilisé un routeur et un dispatcheur. On va, dans
    un premier temps, détailler le fonctionnement du routeur, puis, dans un
    second temps, détailler le fonctionnement du dispatcheur.</p>
  </section2>

  <section2 id="Routeur" for="main-toc menu-toc">
    <title>Routeur</title>

    <p>On va se concentrer sur les explications relatives au routeur HTTP, à
    savoir la classe <code>Hoa\Router\Http</code>.</p>

    <section3 id="Ecrire_une_regle" for="main-toc menu-toc">
      <title>Écrire une règle</title>

      <p>Une règle est définie par un <strong><em>t</em>-uplet</strong> :
      <ulist>
        <item>visibilité : ne pas en tenir compte pour ce chapitre ;</item>
        <item>méthodes HTTP : un tableau des méthodes qui permettent d'atteindre la
        règle, parmi <code>GET</code>, <code>POST</code>, <code>PUT</code>,
        <code>DELETE</code>, <code>HEAD</code> et <code>OPTIONS</code> ;</item>
        <item>identifant : l'identifiant (unique) de la règle ;</item>
        <item>motif : une expression régulière définissant la forme de la
        règle ;</item>
        <item><em>call</em> et <em>able</em> : composantes définissants une
        action que l'on peut appeler ;</item>
        <item>variables : valeurs par défaut ou nouvelles variables pour les
        variables de la règle.</item>
      </ulist></p>
      <p>La liste des méthodes va permettre de <strong>filtrer</strong> les
      règles en fonction de la méthode de la requête HTTP reçue. Ainsi, si on
      reçoit une requête avec une méthode <code>GET</code>, on ne va
      sélectionner que les règles qui acceptent cette méthode. La liste exprime
      la capacité d'une règle à accepter <strong>plusieurs
      méthodes</strong>.</p>
      <p>Le motif s'exprime sous forme d'une expression régulière qui
      s'appliquera sur le <strong>chemin</strong> de l'URI (voir la
      <link href="http://tools.ietf.org/html/rfc3986#section-3">section 3,
      <em>Syntax Components</em>, de la RFC3986</link>). Note : on est
      également capable d'étendre le motif aux
      <strong>sous-domaines</strong>.</p>
      <p>Pour écrire une règle, on utilise la méthode
      <code>Hoa\Router\Http::addRule</code> qui ajoute une règle avec une
      visibilité publique, <ie /> on ne s'occupera pas de la visibilité, elle
      sera gérée toute seule. Ainsi :</p>
      <blockcode language="php">from('Hoa')
-> import('Router.Http');

$router = new Hoa\Router\Http();
$router->addRule($methods, $id, $pattern, $call, $able, $variables);</blockcode>
      <p>Le dernier argument <code>$variables</code> est évidemment optionnel
      puisqu'il sert à déclarer de nouvelles variables ou des valeurs par défaut
      pour les variables.</p>
      <p>Si on devrait exprimer la règle <code>u</code> de notre aperçu, on
      aurait ceci :</p>
      <blockcode language="php">$router->addRule(array('get'), 'u', '/hello', function ( ) { … });</blockcode>
      <p>Par soucis de simpliciter, on peut ne pas utiliser la méthode
      <code>Hoa\Router\Http::addRule</code> mais invoquer un peu de magie ! En
      effet, l'écriture qui va suivre est strictement identique à la
      précédente :</p>
      <blockcode language="php">$router->get('u', '/hello', function ( ) { … });</blockcode>
      <p>Voici comment opère la magie : les appels vers une méthode
      <code><em>method</em>[_<em>method</em>]*(…)</code> seront redirigés vers
      la méthode <code>addRule(array('<em>method</em>'[, '<em>method</em>']*),
      …)</code>. Voyons plutôt des exemples d'équivalences :</p>
      <blockcode language="php">$router->get(…);
$router->addRule(array('get'), …);

$router->get_post(…);
$router->addRule(array('get', 'post'), …);

$router->put_delete_get(…);
$router->addRule(array('put', 'delete', 'get'), …);

// etc.</blockcode>
      <p>L'ordre des méthodes n'a pas d'importance, seul compte l'idenfiant.</p>
      <p>On conviendra de la simplicité qu'introduit cette magie.</p>
    </section3>

    <section3 id="Bien_comprendre_les_motifs_et_les_variables" for="main-toc">
      <title>Bien comprendre les motifs et les variables</title>
    </section3>
  </section2>

  <section2 id="Dispatcheur" for="main-toc menu-toc">
    <title>Dispatcheur</title>

    <section3 id="Pas_si_basique_que_ca" for="main-toc">
      <title>Pas si basique que ça</title>
    </section3>

    <section3 id="Notion_de_kit" for="main-toc">
      <title>Notion de kit</title>
    </section3>

    <section3 id="Vers_un_MVC" for="main-toc">
      <title>Vers un MVC</title>
    </section3>
  </section2>
</section1>

<ulist class="prev_next">
  <item><link href="@ll:chapter=(!title)"
              sref="hoa://Application/External/Literature/Learn/Framework.xyl"
              sref-title="//__current_ns:section1/@id"><previous_chapter /> Aspect framework</link></item>
  <item><link href="@ll:chapter=(!title)"
              sref="hoa://Application/External/Literature/Learn/Stream.xyl"
              sref-title="//__current_ns:section1/@id"><next_chapter /> Une histoire de flux</link></item>
</ulist>

</yield>
</definition>
