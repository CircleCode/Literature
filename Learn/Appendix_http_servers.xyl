<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../Definitions.xyl"?>

<definition xmlns="http://hoa-project.net/xyl/xylophone">
<yield name="chapter">

  <h1 id="Appendix_HTTP_servers">Manuel d'apprentissage<title_break />Annexe,
  Configuration des serveurs HTTP</h1>

  <p>Nous proposons dans ce guide de découvrir comment configurer un
  <strong>hôte virtuel</strong> ainsi que la <strong>réécriture d'URL</strong>
  pour les serveurs HTTP les plus courants afin de profiter de toutes les
  fonctionnalités de Hoa.</p>
  <p>Les hôtes virtuels permettent de maintenir plusieurs sites Internet sur un
  même serveur tout en leur associant un nom ainsi que des paramètres
  spécifiques.</p>
  <p>La réécriture d'URL consiste à faire réécrire au serveur HTTP des URL
  complexes sous une forme plus simple afin d'en améliorer la lisibilité (pour
  les utilisateurs du sites mais également pour les moteurs de recherches).</p>

  <h2 id="Table_des_matieres" for="menu-toc">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Apache" for="main-toc">Apache</h2>

  <p>Apache est le serveur HTTP le plus utilisé au monde. Il est installé par
  défaut sur Mac OS X, disponible via votre gestionnaire de paquet sur la
  plupart des distributions Linux ou installable en quelques clics sous Windows.
  Les sources et les exécutables sont disponibles sur le
  <a href="http://httpd.apache.org/">site officiel</a>.</p>

  <h3 id="Apache_Hote_virtuel" for="main-toc">Hôte virtuel</h3>

  <p>Pour ajouter un hôte virtuel à Apache il faut modifier le fichier
  <code>httpd.conf</code> afin d'y ajouter à la fin la déclaration de notre
  nouvel hôte :</p>

  <tabs class="plain">
    <tablist>
      <tab for="tunix_httpd" selected="true">Unix</tab>
      <tab for="twindows_httpd">Windows</tab>
    </tablist>

    <tabpanel id="tunix_httpd">
      <pre><code language="conf">&amp;lt;VirtualHost *:80>
  ServerName localhost

  DocumentRoot /path/to/my/hoa/app/Application/Public

  &amp;lt;Directory /path/to/my/hoa/app/Application/Public>
    Options All
    AllowOverride All
  &amp;lt;/Directory>

&amp;lt;/VirtualHost></code></pre>
    </tabpanel>
    <tabpanel id="twindows_httpd">
      <pre><code language="conf">&amp;lt;VirtualHost *:80>
  ServerName localhost

  DocumentRoot C:\path\to\my\hoa\app\Application\Public

  &amp;lt;Directory C:\path\to\my\hoa\app\Application\Public>
    Options All
    AllowOverride All
  &amp;lt;/Directory>

&amp;lt;/VirtualHost></code></pre>
    </tabpanel>
  </tabs>

  <p>Cet hôte virtuel (<code>VirtualHost</code>) minimal permet de faire
  fonctionner Hoa grâce au <code>DocumentRoot</code> qui pointe sur le
  sous-dossier <code>/Application/Public/</code> du dossier de l'application
  Hoa. Le  <code>ServerName</code> le plus courant pour le développement est
  <code>localhost</code> car il est résolu sur l'adresse IP locale (127.0.0.1).
  Si vous utilisez un autre nom, celui-ci doit figurer dans votre fichier Host
  (<code>/etc/hosts</code> sous Unix,
  <code>%SystemRoot%\system32\drivers\etc\hosts</code> sous Windows) où être
  résolu par votre serveur DNS comme pointant sur votre adresse IP locale.</p>

  <p>La directive <code>Directory</code> permet de préciser des fonctionnalitées
  pour un dossier en particulier. Dans notre cas nous souhaitons pouvoir
  utiliser toutes les fonctionnalités, nous activons donc
  <code>Options All</code>. Nous souhaitons pouvoir configurer ces
  fonctionnalitées grâce à un fichier <code>.htaccess</code>
  que nous placerons dans le répertoire, nous activons cette possibilité avec
  la directive <code>AllowOverride All</code>.</p>

  <p>La <a href="http://httpd.apache.org/docs/">documentation</a> permet de
  découvrir toutes les directives disponibles pour la configuration d'Apache.</p>

  <h3 id="Apache_Reecriture_d_URL" for="main-toc">Réécriture d'URL</h3>

  <p>La réécriture d'URL pour Apache est gérée par le module mod_rewrite,
  celui-ci doit être activé grâce à la commande :
<pre><code language="shell">a2enmod mod_rewrite</code></pre>
  sous Unix ou en décommentant, enlevant le <code>#</code>, la ligne :
<pre><code language="conf"># LoadModule rewrite_module modules/mod_rewrite.so
</code></pre>
  dans le fichier httpd.conf sous
  Windows. Les règles de réécritures peuvent être spécifiées dans un
  fichier <code>.htaccess</code> à placer dans le répertoire
  <code>/Application/Public</code> de votre application Hoa :</p>

  <pre><code language="conf">RewriteEngine On
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php?$1</code></pre>

  <p>La première ligne active la réécriture d'URL. Les lignes suivantes ajoutent
  des conditions (<code>RewriteCond</code>) qui empêchent de réécrire l'URL si
  le fichier (<code>-f</code>) ou le dossier (<code>-d</code>) demandé existe
  sur le disque. Enfin, si nous atteignons la règle de réécriture
  (<code>RewriteRule</code>) alors le chemin demandé est passé en paramètre au
  fichier index.php.</p>

  <h2 id="Nginx" for="main-toc">Nginx</h2>

  <p>Nginx est un serveur HTTP développé pour les sites à fort traffic. Il a
  acquis sa réputation grâce à sa faible utilisation des ressources. Nginx est
  disponible sur toutes les plateformes sur <a href="http://nginx.org/">le site
  officiel</a>.</p>

  <h3 id="Nginx_Hote_virtuel" for="main-toc">Hôte virtuel</h3>

  <p>Les hôtes virtuels, appelés <code>ServerBlock</code> pour Nginx, sont
  décris dans le fichier <code>nginx.conf</code>. Pour ajouter un hôte virtuel
  pour votre développement avec Hoa vous pouvez ajouter les lignes suivantes en
  toute fin de votre fichier <code>nginx.conf</code> :</p>

  <tabs class="plain">
    <tablist>
      <tab for="tunix_nginx" selected="true">Unix</tab>
      <tab for="twindows_nginx">Windows</tab>
    </tablist>

    <tabpanel id="tunix_nginx">
  <pre><code language="conf">server {
  server_name localhost;

  location / {
    root   /path/to/my/hoa/app/Application/Public/;
    index  index.php;
  }

  location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME /path/to/my/hoa/app/Application/Public/$fastcgi_script_name;
    include /etc/nginx/fastcgi_params;
  }
}</code></pre>
    </tabpanel>
    <tabpanel id="twindows_nginx">
  <pre><code language="conf">server {
  server_name localhost;

  location / {
    root   C:/path/to/my/hoa/App/Application/Public/;
    index  index.php;
  }

  location ~ \.php$ {
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME C:/path/to/my/hoa/app/Application/Public/$fastcgi_script_name;
    include C:/nginx/conf/fastcgi_params;
  }
}</code></pre>
    </tabpanel>
  </tabs>

  <p>Le bloc <code>server</code> permet de décrire le nom du serveur. Le premier
  bloc <code>location</code> permet de préciser à Nginx à quel chemin sur le
  disque correspond une requête envoyée sur <code>/</code>. Le second bloc
  <code>location</code> sert à transmettre à PHP FastCGI le traitement de tous
  les fichiers avec l'extension <code>.php</code>.</p>

  <p>La<a href="http://nginx.org/en/docs/">documentation</a> permet d'étudier
  plus précisemment toutes les directives de configuration de Nginx.</p>

  <h3 id="Nginx_Reecriture_d_URL" for="main-toc">Réécriture d'URL</h3>

  <p>La réécriture d'URL pour Nginx doit être décrite dans le premier bloc
  <code>location</code> en y ajoutant la ligne suivante :</p>

  <pre><code language="conf">try_files $uri $uri/ /index.php?$args;</code></pre>

  <p>L'instruction <code>try_files</code> vérifie l'existance de fichiers dans
  l'ordre des paramètres. Ainsi avec l'instruction précédente Nginx va chercher
  le fichier demandé, puis un dossier avec le même nom (avec le slash final) et
  si rien de tel n'est trouvé sur le disque, alors il transformera la requête
  pour la passer au fichier <code>index.php</code>.</p>

  <h2 id="Bhoa" for="main-toc">Bhoa</h2>

  <p>Bhoa est le serveur HTTP intégré à Hoa. Il n'est pas très évolué mais ne
  nécessite aucune configuration particulière pour fonctionner. Il est donc
  l'outil idéal pour développer avec Hoa.</p>

  <p>Bhoa jouant le rôle de serveur HTTP,
  il a besoin de communiquer avec PHP qui lui se charge interpréter les pages.
  Bhoa utilise PHP FastCGI pour exécuter PHP, nous allons donc devoir le
  démarrer sur le port standard (9000) :</p>

  <tabs class="plain">
    <tablist>
      <tab for="tunix_start_phpcgi" selected="true">Unix</tab>
      <tab for="twindows_start_phpcgi">Windows</tab>
    </tablist>
    <tabpanel id="tunix_start_phpcgi">
      <pre><code language="shell">$ php-cgi -b 127.0.0.1:9000&amp;amp;</code></pre>
    </tabpanel>
    <tabpanel id="twindows_start_phpcgi">
      <pre><code language="shell">// dans une nouvelle invite de commande
> php-cgi -b 127.0.0.1:9000</code></pre>
    </tabpanel>
  </tabs>

  <p>Enfin, Hoa fournit une abstraction des chemins à travers le protocole
  <code>hoa://</code> qui propose le chemin
  <code>hoa://Application/Public/</code> pour accéder à notre dossier
  public. Nous allons utiliser ce chemin pour définir la racine du serveur ;
  ainsi :</p>
  <tabs class="plain">
    <tablist>
      <tab for="tunix_start_bhoa" selected="true">Unix</tab>
      <tab for="twindows_start_bhoa">Windows</tab>
    </tablist>
    <tabpanel id="tunix_start_bhoa">
      <pre><code language="shell">$ gordonsapp bhoa --root hoa://Application/Public/
Server is up, on tcp://127.0.0.1:8888!
Root: hoa://Application/Public/.

Waiting for connection… ▋</code></pre>
    </tabpanel>
    <tabpanel id="twindows_start_bhoa">
      <pre><code language="shell">> gordonsapp bhoa --root hoa://Application/Public/
Server is up, on tcp://127.0.0.1:8888!
Root: hoa://Application/Public/.

Waiting for connection… ▋</code></pre>
    </tabpanel>
  </tabs>
  <p>Par défaut Bhoa écoute le port 8888. Il faut des droits <code>root</code>
  pour écouter le port 80.</p>

  <h2 id="Serveur_interne_de_PHP" for="main-toc">Serveur interne de PHP</h2>

  <p>PHP, depuis la version 5.4, fournit un
  <a href="http://php.net/commandline.webserver">serveur HTTP natif</a>. Ce
  serveur n'est utile que pour du développement, tout comme Bhoa. Nous pouvons
  l'utiliser de cette manière, depuis le dossier <code>Public/</code> de notre
  application :</p>
  <pre><code language="shell">$ php -S 127.0.0.1:8888 -r .
PHP x.y.z Development Server started at …
Listening on 127.0.0.1:8888
Document root is …/Public
Press Ctrl-C to quit.
▋</code></pre>
  <p>Si nous accédons à l'adresse
  <a href="http://127.0.0.1:8888"><code>127.0.0.1:8888</code></a>, nous aurons
  le site mais probablement avec des erreurs, car les URL ne sont pas réécrites.
  Pour cela, nous pouvons préciser un fichier qui s'occupera de cette tâche.
  Nous proposons le fichier <code>.webserver</code> (dans le dossier
  <code>Public/</code> toujours) pour interpréter les URL comme étant réécrites.
  Le principe est simple : toutes les URL se terminant par <code>.html</code>
  sont redirigées sur <code>index.php</code>, et les autres fichiers sont servis
  « statiquement » (verbatim). Ce fichier est écrit en utilisant Hoa
  lui-même ! Ainsi :</p>
  <pre><code language="php">&amp;lt;?php

require_once '/usr/local/lib/hoa/Core/Core.php';

from('Hoa')
-> import('Router.Http')
-> import('Dispatcher.Basic')
-> import('File.Read')
-> import('Mime.~');

$router = new Hoa\Router\Http();
$router
    ->get('i', '(|.*\.html)', function ( ) {

        require 'index.php';
    })
    ->get('a', '.*', function ( Hoa\Dispatcher\Kit $_this ) {

        $file = __DIR__ . DS . $_this->router->getURI();

        if(true === file_exists($file)) {

            $stream = new Hoa\File\Read($file);
            $mime   = new Hoa\Mime($stream);

            header('Content-Type: ' . $mime->getMime());
            echo $stream->readAll();
        }
        else {

            header('Status: 500 Internal Server Error');
            echo '500';
        }
    });

$dispatcher = new Hoa\Dispatcher\Basic();
$dispatcher->dispatch($router);
  </code></pre>
  <p>Et voici comment l'utiliser dans le serveur natif de PHP :</p>
  <pre><code language="shell">$ php -S 127.0.0.1:8888 -r . .webserver.php
PHP x.y.z Development Server started at …
Listening on 127.0.0.1:8888
Document root is …/Public
Press Ctrl-C to quit.
▋</code></pre>
  <p>Grâce au fichier <code>.webserver</code>, la majorité des exemples donnés
  par Hoa dans les différents manuels seront fonctionnels. À vous d'adapter à
  vos besoins !</p>

  <h2 id="Pour_aller_plus_loin" for="main-toc">Pour aller plus loin</h2>

  <p>Maintenant que votre hôte virtuel est configuré correctement ainsi que la
  réécriture d'URL, vous pouvez profiter d'Hoa\Dns pour résoudre les noms de
  domaine .hoa et ainsi utiliser un hôte virtuel comme monprojet.hoa</p>
</yield>
</definition>